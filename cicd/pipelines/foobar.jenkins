#!/usr/bin/env groovy

string Klabel = "k8s-${UUID.randomUUID().toString()}"
def home = "/home/jenkins"
def workspace = "${home}/workspace/build-jenkins-operator"
def workdir = "${workspace}/src/github.com/jenkinsci/kubernetes-operator/"

pipeline {
    parameters {
        string(name: 'AIVEN_AUTH_TOKEN', defaultValue: '', description: 'for test only')
        string(name: 'TIMESCALE_PROJECT_NAME', defaultValue: 'ivanshity-12ff', description: 'Project name')
        string(name: 'TIMESCALE_DATABASE_NAME', defaultValue: 'foobar', description: 'Database name')
        string(name: 'TIMESCALE_SERVICE', defaultValue: 'tsdb-dcebbfc', description: 'Service')
        string(name: 'TIMESCALE_POOL', defaultValue: '', description: 'Pool')
        string(name: 'TIMESCALE_POOL_SIZE', defaultValue: '10', description: 'Pool size')
        choice(name: 'TIMESCALE_POOL_MODE', choices: ['session', 'transaction', 'statement'], description: 'Pool mode')

    }
    agent {
        kubernetes {
            label Klabel
            containerTemplate {
                name 'test'
                image 'us.gcr.io/flyr-gcr/jenkins-minion-stable:1.0'
                command 'sleep'
                args '60m'
            }
        }
    }

    stages {
        stage('Run shell') {
            steps {
                container('test') {
                    sh 'echo "hello world"'
                }
            }
        }
        stage('Download aiven cli') {
            steps {
                container('test') {
                    sh 'python3 -m pip install aiven-client'                            
                }
            }
        }
        stage('Provide and verify credentials to TimescaleDB') {
            steps {
                container('test') {
                    sh 'mkdir -p ~/.config/aiven'
                    sh 'echo "{ "auth_token": $AIVEN_AUTH_TOKEN, "user_email": "your.email@aiven.com" }" > ~/.config/aiven/aiven-credentials.json'
                    sh 'avn project list'
                }
            }
        }
        stage('Create database') {
            steps {
                container('test') {
                    sh 'avn service database-create --dbname ${TIMESCALE_DATABASE_NAME} --project ${TIMESCALE_PROJECT_NAME} ${TIMESCALE_SERVICE}'                            
                }
            }
        }
        stage('Create connection pool') {
            steps {
                container('test') {
                    sh '''\
                    avn service connection-pool-create \ 
                    --pool-name ${TIMESCALE_POOL} \ 
                    --pool-size ${TIMESCALE_POOL_SIZE} \ 
                    --pool-mode ${TIMESCALE_POOL_MODE} \ 
                    --username=tsdbadmin \ 
                    --dbname ${TIMESCALE_DATABASE_NAME} \ 
                    --project ${TIMESCALE_PROJECT_NAME} ${TIMESCALE_SERVICE}
                    '''                            
                }
            }
        }
    }
}
